---
title: "Data Management Group Assignment (IB9HP0)"
format: pdf
editor: visual
author: "Group 2"
---

### Introduction

### Overview

![](flowchart.png)

### Part 1: Database Design and Implementation

#### Task 1.1: E-R Diagram Design

![ER Diagram](ER%20Diagram.jpg)

![Entity Relationship Sets](Entity%20Relationship%20Sets.png)

#### Task 1.2: SQL Database Schema Creation

-   **Customers** ($\underline{id}$, date_of_birth, first_name, last_name, phone_number, email, billing_address_street_number, billing_address_street_name, billing_address_street_suffix, billing_address_city, billing_address_state, billing_address_country, billing_address_postcode, current_shipping_address_street_number, current_shipping_address_street_name, current_shipping_address_street_suffix, current_shipping_address_city, current_shipping_address_state, current_shipping_address_country, current_shipping_address_postcode, current_payment_method)
-   **Shippers** ($\underline{id}$, name, phone_number)
-   **Products** ($\underline{id}$, $\underline{\underline{seller\_id}}$, $\underline{\underline{category\_id}}$, name, color, size, brand, price, currency, inventory)
-   **Order** ($\underline{id}$, $\underline{\underline{customer\_id}}$ , $\underline{\underline{product\_id}}$ , $\underline{\underline{shipper\_id}}$[,]{.underline} order_date, order_time, quantity, discount, rating_review)
-   **Seller** ($\underline{id}$, name, email, address_street_number, address_street_name, address_street_suffix, address_city, address_state, address_country, address_postcode)
-   **Advertisements** ($\underline{id}$, $\underline{\underline{product\_id}}$[,]{.underline} content, ad_clicks, budget, currency)
-   **Categories** ($\underline{id}$[,]{.underline} name, description)

The primary keys are underlined. Double underlining represents foreign keys. Relationships between tables are represented by lines connecting corresponding attributes, indicating the associations between entities.

Assumptions & Justification:

-   Products are classified into categories (unique by category ID). Each product belongs to only one category whilst one category can include multiple products, forming the 1:M relationship between Categories and Products entity.
-   Identical items sold by different sellers (unique by seller ID) are considered different products and have unique product ID in the database. Thus, one product can have only one seller but one seller may distribute multiple products, forming the 1:M relationship between Sellers and Products entity. This conceptual design is important to track inventory for each product sold by each seller.
-   Advertisements (unique by ID) are specific for each product but one product can have multiple advertisements, forming the 1:M relationship between Products and Advertisements entity
-   Customers are unique by ID and **email address**. For simplification, we assume only current shipping address and current payment method are captured in the database. Address and customer name are composite attributes which are flatten in the logical and physical schema.
-   Multiple customers can order multiple products that will be delivered to them by a selection of shippers (e.g., depending on the warehouse location), forming the ternary M:N relationship among the three entities. Each time a customer commits an order, a unique order ID will be generated. Each order will have quantity, date and time.
-   A customer can only leave a review on a product if he has ordered it. Thus rating_reviews must be specific to an order, forming an attribute of the Orders relationship.

Will add code chunks of table creation here

#### Part 2: Data Generation and Management

#### Task 2.1: Synthetic Data Generation

Entire synthetic data is generated using Mockaroo with the schema and csv files can be publicly accessed via the following links:

-   **xxxxx**

Foreign key can be set by selecting field type as ‘Dataset Column’ then connecting to the other dataset where the foreign key comes from.

Field type as ‘Formula’ or ‘Custom List’ with dynamic distribution are utilised to set specific rules and conditions for the synthetic data generation as realistic as possible, for example:

-   Product names are conditional to category ID

-   Product size and price ranges are conditional to product name

-   Advertisement contents are conditional product name

#### Task 2.2: Data Import and Quality Assurance

### Part 3: Data Pipeline Generation

#### Task 3.1: GitHub Repository and Workflow Setup

#### Task 3.2: GitHub Actions for Continuous Integration

### Part 4: Data Analysis and Reporting with Quarto in R

#### Task 4.1: Advanced Data analysis in R

#### Task 4.2: Comprehensive Reporting with Quarto

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
